# -*- python -*-
# ex: set syntax=python:

#    This file is part of vlbuildbot.
#
#    pnbuildbot is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License v3 as published by
#    the Free Software Foundation.
#
#    pnbuildbot is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    See http://www.gnu.org/licenses/ for complete licensing terms.

import slaves
import builders
import schedulers
import os

# to allow configuration of all usernames and passwords in a separate file
# (except slaves that is)
from ConfigParser import SafeConfigParser
parser = SafeConfigParser()
parser.read('pnconfig.ini')

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
c['slaves'] = [ i for i in slaves.PNSlave.all(parser.items('slaves')) ]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = parser.get('net', 'slave-port')

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.
c['builders'] = [ i for i in builders.AppBuilder.all( os.path.join(os.getcwd(), 'manifest'), c['slaves'] )]
c['builders'].append)(builders.AppBuilder.clean_chroot( c['slaves'] ))
c['builders'].append)(builders.AppBuilder.clean_ftp_dir( c['slaves'] ))

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.


# FIXME:  Update as necessary

from buildbot.changes import pb
c['change_source'] = pb.PBChangeSource()

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter

c['schedulers'] = []
c['schedulers'] = [ i for i in  schedulers.PNScheduler.all( c['builders'] ) ]

# Add the forced scheduler for the http force builds
c['schedulers'].append(ForceScheduler(
  name='http_forced',
  builderNames=[b.name for b in c['builders']],))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

from buildbot.status import html
from buildbot.status.web import authz
from buildbot.status.html import WebStatus
from buildbot.status.web.authz import Authz
from buildbot.status.web.auth import BasicAuth

users = [ i for i in parser.items('users') ]

authz = Authz(auth=BasicAuth(users),
    forceBuild='auth', # only authenticated users
    pingBuilder=True, # but anyone can do this
    showUsersPage='auth', # only authenticated users
)

c['status'] = []
c['status'].append(html.WebStatus(http_port=parser.get('net', 'status-port'), authz=authz,
                   change_hook_dialects={ 'github' : True }))


# IRC BOT
from buildbot.status import words
irc = words.IRC("irc.freenode.org", parser.get('irc', 'username'),
	channels=[{"channel" : "#pacnas",
		"password": parser.get('irc', 'password')}], allowForce=True, useColors=True, # avspwd
		notify_events={
			'exception': 1,
			'started': 1,
			'finished': 1,
			'failure': 1,
			'failureToSuccess': 1,
			'successToFailure': 1})
c['status'].append(irc)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "PacNAS"
c['titleURL'] = "http://build.pacnas.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

#c['buildbotURL'] = "http://localhost:8010"
c['buildbotURL'] = "http://build.pacnas.org/buildbot/"
####### DB URL


# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"

# Log Handling
c['logCompressionLimit'] = 16384
c['logCompressionMethod'] = 'gz'
c['logMaxSize'] = 1024*1024 # 1M
c['logMaxTailSize'] = 32768

# Change Horizon
c['changeHorizon'] = 200
c['buildHorizon'] = 100
c['eventHorizon'] = 50
c['logHorizon'] = 40
c['buildCacheSize'] = 15
